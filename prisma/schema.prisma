// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

// Enum para os status dos serviços
enum ServiceStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Enum para as especialidades dos mecânicos
enum Specialty {
  ENGINE_REPAIR
  TRANSMISSION_REPAIR
  ELECTRICAL_SYSTEM_REPAIR
  BRAKE_SYSTEM_REPAIR
  SUSPENSION_REPAIR
  BODYWORK_REPAIR
  PAINTING
  OTHER
}

// User entity for user authentication
model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  type      String // Owner/Mechanic
  workshops Workshop[]
  Vehicle   Vehicle[]
}

// Vehicle entity for vehicle information
model Vehicle {
  id                Int       @id @default(autoincrement())
  brand             String
  model             String
  manufacturingYear Int
  plate             String
  owner             User      @relation(fields: [ownerId], references: [id])
  ownerId           Int
  servicesPerformed Service[]
}

// Service entity for services to be performed
model Service {
  id                 Int           @id @default(autoincrement())
  serviceName        String
  serviceDescription String
  serviceValue       Float
  completionDeadline DateTime
  serviceStatus      ServiceStatus // Enum for service status
  vehicle            Vehicle       @relation(fields: [vehicleId], references: [id])
  vehicleId          Int
}

// Part entity for part information
model Part {
  id              Int    @id @default(autoincrement())
  partName        String
  partDescription String
  partValue       Float
  stockQuantity   Int
}

// Workshop entity for workshop information
model Workshop {
  id           Int        @id @default(autoincrement())
  workshopName String
  address      String
  phone        String
  owner        User       @relation(fields: [ownerId], references: [id])
  ownerId      Int
  mechanics    Mechanic[]
}

// Mechanic entity for mechanic information
model Mechanic {
  id           Int       @id @default(autoincrement())
  mechanicName String
  specialty    Specialty // Enum for mechanic specialty
  email        String
  phone        String
  workshop     Workshop  @relation(fields: [workshopId], references: [id])
  workshopId   Int
}
