generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

// Enum para os status dos serviços
enum ServiceStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Enum para as especialidades dos mecânicos
enum Specialty {
  ENGINE_REPAIR
  TRANSMISSION_REPAIR
  ELECTRICAL_SYSTEM_REPAIR
  BRAKE_SYSTEM_REPAIR
  SUSPENSION_REPAIR
  BODYWORK_REPAIR
  PAINTING
  OTHER
}

// User entity for user authentication
model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  type      String
  workshops Workshop[]
  Vehicle   Vehicle[]
}

// Vehicle entity for vehicle information
model Vehicle {
  id                String    @id @default(uuid())
  brand             String
  model             String
  manufacturingYear Int
  plate             String
  ownerId           String
  servicesPerformed Service[]
  fipeId            String

  owner User @relation(fields: [ownerId], references: [id])
}

// Service entity for services to be performed
model Service {
  id                 String         @id @default(uuid())
  serviceName        String
  serviceDescription String
  serviceValue       Float?
  realizedDate       DateTime
  completionDeadline DateTime?
  serviceStatus      ServiceStatus? // Enum for service status
  vehicleId          String

  vehicle      Vehicle       @relation(fields: [vehicleId], references: [id])
  partsChanged PartChanged[] @relation("PartsChangedByService")
}

// Part entity for part information
model Part {
  id              String @id @default(uuid())
  partName        String
  partDescription String
  partValue       Float
  stockQuantity   Int
}

model PartChanged {
  id              String   @id @default(uuid())
  partName        String
  partDescription String
  partValue       Float?
  manufacturer    String
  service         Service? @relation("PartsChangedByService", fields: [serviceId], references: [id])
  serviceId       String?
}

// Workshop entity for workshop information
model Workshop {
  id           String     @id @default(uuid())
  workshopName String
  address      String
  phone        String
  ownerId      String
  mechanics    Mechanic[]

  owner User @relation(fields: [ownerId], references: [id])
}

// Mechanic entity for mechanic information
model Mechanic {
  id           String    @id @default(uuid())
  mechanicName String
  specialty    Specialty // Enum for mechanic specialty
  email        String
  phone        String
  workshopId   String

  workshop Workshop @relation(fields: [workshopId], references: [id])
}
